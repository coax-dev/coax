name: release

on:
  push:
    tags:
    - 'v*'

jobs:

  test:
    name: Run tests
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on: [ubuntu-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install system packages (macos-latest)
      if: matrix.runs-on == 'macos-latest'
      run: brew install swig
    - name: Install system packages (ubuntu-latest)
      if: matrix.runs-on == 'ubuntu-latest'
      run: sudo apt-get install swig
    - name: Install python packages
      run: |
        python -m pip install --upgrade pip wheel
        python -m pip install -r requirements.txt
        python -m pip install -r requirements.dev.txt
        python -m pip install .
    - name: Lint with flake8
      run: |
        python -m pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        python -m flake8 coax --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings.
        python -m flake8 coax --count --exit-zero --max-complexity=10 --statistics
    - name: Test with pytest
      run: |
        python -m pip install pytest
        python -m pytest -v coax

  build-and-deploy:
    name: Build and deploy
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Build
      run: |
        python -m pip install wheel
        python setup.py sdist
        python setup.py bdist_wheel
    - name: Upload to pypi
      run: |
        python -m pip install twine
        python -m twine upload --skip-existing --non-interactive --verbose dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TWINE_TOKEN }}

  create-release:
    name: Create release
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: "Release notes: https://coax.readthedocs.io/release_notes.html"
          draft: false
          prerelease: ${{ contains(github.ref, 'rc') }}
